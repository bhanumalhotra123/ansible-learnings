Setting Up environment

VMs using Virtual Box or VMWare Workstation
Docker
Vagrant

We need a control system where we can install ansible and target other systems.

Setting up 

virtualbox.org
Install it

osboxes.org/debian/
you will find images here
We will use Debian 8.6 Jessie image  Download it

Go to VMWare

Name: Ansible Controller
Type: Linux
Version: Debian 64 bit [the image you downloaded]
Memory size: 1Gb would be fine for now
Hard Disk: Here you select the image .vdi file

Now we have to make sure this VM have access to the internet.

Settings > Adapter > Bridged Adapter

Power it on!

pass is give from where you download the file

  
su     [switch to root]

ifconfig to get the ip

Do ssh into it using your terminal

Go to https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html#installing-ansible-on-debian

after installation check using the command: ansible


Create two more such servers

We can do different things like applying playbooks on different environments
or you can have 1 for app and other for db 

Now you can create snapshots of these vms we created so that when testing of playbooks is down we can revert back.
So before running the playbook please revert back.



Add the following line to /etc/apt/sources.list or /etc/apt/sources.list.d/ansible.list:

deb http://ppa.launchpad.net/ansible/ansible/ubuntu MATCHING_UBUNTU_CODENAME_HERE main
Example for Debian 11 (Bullseye)

deb http://ppa.launchpad.net/ansible/ansible/ubuntu focal main

for debian12
deb http://deb.debian.org/debian/ bookworm main


Then run these commands:

$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
$ sudo apt update
$ sudo apt install ansible




Ansible Controller

Ansible Target 1
Ansible Target 2



Ansible Controller

cat > inventory.txt

target1 ansible_host=192.168.1.10 ansible_ssh_pass=Passw0rd
target2 ansible_host=192.168.1.13 ansible_ssh_pass=Passw0rd



ansible target1 -m ping  -i inventory.txt     

Failed!

Using a SSH password instead of a key is not possible because Host Key checking is enabled and 
ssh password does not support this. Please add this host's fingerprint to your known_hosts file to manage this host.

Security out of the Box




root@44d2ac6a5c1c:/home/cloud_user# vi inventory.txt 
root@44d2ac6a5c1c:/home/cloud_user# ansible target1 -m ping -i inventory.txt
target1 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
root@44d2ac6a5c1c:/home/cloud_user# cat inventory.txt 
target1 ansible_host=3.83.220.80 ansible_user=cloud_user ansible_ssh_pass=hellohello




Wildcard pattern
ansible target* -m ping -i inventory.txt




Ansible on Docker
run a docker container which is ssh enabled

docker run -it -d mumshad/ubuntu-ssh-enabled

docker pass

docker inspect container_id

get the ip 



run few more containers with the same command
get ip of all 

inside first create inventory.txt

target1 ansbile_host=172.17.0.2 ansible_ssh_pass=Passw0rd
target2
target3


target* -m ping -i inventory.txt







USE CASE  


Web application

Identitfy server
Python Install and install dependencies
Install and Configure Mysql strart 
Install flask
Source code
Run apps 



#inventory file
db_and_web_server ansible_ssh_pass=Passw0rd ansible_host=192.168.1.14


#ansible playbook

---
- name: Deploy Web application
  hosts: db_and_web_server
  tasks:
    - name: Install dependencies
    - name: Install MySQL database
    - name: Start Mysql service
    - name: Create Application database
    - name: Create Application DB user
    - name: Install Python Flask dependencies
    - name: Copy web-server code
    - name: Run web-server




ansible-galaxy init mysql_db 

This command is used to create a role and structure under it.


You can browse roles on ansible galaxy

You can share as well.





Asynchronous Actions

Ansible Master --------SSH-----------> Ansible target

SSH connection stays alive through out the task in a playbook 




Run a process and check on it later
Run multiple process at once and check on them later
Run processes and forget


Lets say as part of our deployment we have a script which performs the health check.
It is located at /opt/monitor_webapp.py 
The script performs checks for 5 mins.
We want ansible to kick off and say check it after 1 min.

Kick it off and check on it later.

By default ansible checks it each 10 sec. But we can change that using poll.
We don't want to wait for 5 mins, why?
What if script fails? We don't want to waste the time.

async - How long to run/

poll - How frequently to check?
       default 10 seconds

Check task9 Properly explained there using comments.




Strategy:

Linear Strategy: Default
When you have a list of tasks on ansible playbook and you have more than 1 host.

Ansible first run the 1st task on all the servers 1 by 1 and then move to running 2nd task on all server 1 by 1.

It doesn't work like running all the tasks on a server and then running all the tasks on 2nd server and so on.

This is default strategy and is called as linear strategy.



Free Strategy:

Each server goes to the end as fast is it can without bothering about other one.
Basically it doesn't wait for 1 task to be completed on all the servers.


Strategy: Batch
You can control number of servers executed at once.

serial:3       is used to define it.

If it is set to 3. Ansible first runs all the tasks on 3 server like a linear strategy. Once it completes it moves to next set of 3 servers.

There is also possibility of using percentages.



What if there are 100 servers?

Ansible uses by default 5 forks (mentioned in ansible.cfg). It will run tasks on 5 servers at a time doesn't matter how many servers you have.

You can change the value, but make sure you have sufficient resources and network bandwidth for it.



Check task 10 for strategies.



Error Handling

What happens when the task fail?

Assume a playbook running on a single server with 5 tasks.

say 3rd task throws the error.
Ansible directy stops the further task processing.


Now think of 3 servers, 5 tasks.


Say one of task failed just at server2.

Ansible drops that server and continues with others.


What if we want it to stop the execution of play on all the servers even if one of it fails?

any_error_fatal: true

Check task 11
 


mail module is used to send email

- main:
    to: devops@corp.com
    subject: Server Deployed!
    body: Web Server Deployed
  ignore _errors: yes             #if the task is not important we can use this



Jinja2 templating


{{}}

{%%}

If not defined either it fails or it takes the default value if you had given that.

String Manipulation - Filters

The name is {{ my_name }} => The name is Bond
The name is {{ my_name | upper }} => The name is BOND 
The name is {{ my_name | lower }} => The name is bond
The name is {{ my_name | tittle }} => The name is Bond
The name is {{ my_name | replace ("Bond","Bourne")}} => The name is bourne
The name is {{ first_name | default("James)}} {{my_name}} => The name is James Bond 


{{ [1,2,3] | min}}               1
{{ [1,2,3,2] | unique }}     1,2,3


{{[1,2,3,4] | union( [4,5] )}}      1,2,3,4,5
{{[1,2,3,4] | intersect( [4,5] )}}   4

{{100 | random}}        Random number


{{ ["The", "name", "is", "Bond"] | join("")}} The name is Bond



{{"/etc/hosts" | basename}}      hosts

{{"c:\windows\hosts | win_basename}}   hosts

{{"c:\windows\hosts" | win_splitdrive}}       ["c:", "\windows\hosts"]

{{"c:\windows\hosts" | win_splitdrive | first}}       "c:"

{{ "c:\windows\hosts" | win_splitdrive | last}}        "\windows\hosts"



https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-filters
https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_templating.html






LOOKUPS

So far we are storing creds in inventory file.

Let us say creds are instead stored in a csv file.

# CSV File - credejtials.csv
Hostname, password
Target1, Passw0rd
Target2, Passw0rd



         Type of File
{{lookup('csvfile', 'target1' file=/tmp/credentials.csv delimiter=,')}}
                 Value to Lookup       File to Lookup 



This will return the password from the csv file






Vault
Storing passwords as text is risky

ansible-vault encrypt inventory.txt


now if you try to run the playbook Now
ansible-playbook playbook.yml -i inventory.txt
IT will throw an error


ansible-playbook.yml -i inventory.txt -ask-vault-pass

or

ansible-playbook playbook.yml -i inventory.txt -vault-password-file ~./vault_pass.txt

Is it okay to pass a txt file as a pass? NO!


So: 

ansible-playbook playbook.yml -i inventory.txt -vault-password-file ~./vault_pass.py


this script will be the one which you will create to fetch the password from a secured location.




ansible-vault view inventory.txt

ansible-vault create inventory.txt





Dynamic Inventory       task 14

More often than not we would like to fetch the data of inventories to run our playbooks from 
a CMDB or Cloud API 


Dynamic Inventory is inventory information that ansible retrives programmaticaly when a playbook is run
as opposite to a static inventory file which we define in a txt file.





Various modules availale:


System: 
User, Group, Hostname, Iptables, Lvg, Lvol, Make, Mount, Ping, Timezone, Systemd, service

Commands:
Command, Expect, Raw, Script, Shell

Files:
Acl, Archive, Copy, File, Find, Lineinfile, Replace, Stat, Template, Unarchive

Database:
Mongodb, Mssql, Mysql, Postgresql, Proxysql, vertica

Cloud:

Windows:




What about custom modules?



say we want to write a custom_debug module which writes the date with the msg


#Sample Ansible Playbook1.yml
- 
  name: Debug Something
  hosts: target1
  tasks: 
    - debug: msg='This is test message'




Custom plugins
check filter_plugins dir


Callback plugins

Default is set to skippy

export ANSIBLE_STDOUT_CALLBACK=kson; ansible-playbook playbook1.yml 

https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/callback