Setting Up environment

VMs using Virtual Box or VMWare Workstation
Docker
Vagrant

We need a control system where we can install ansible and target other systems.

Setting up 

virtualbox.org
Install it

osboxes.org/debian/
you will find images here
We will use Debian 8.6 Jessie image  Download it

Go to VMWare

Name: Ansible Controller
Type: Linux
Version: Debian 64 bit [the image you downloaded]
Memory size: 1Gb would be fine for now
Hard Disk: Here you select the image .vdi file

Now we have to make sure this VM have access to the internet.

Settings > Adapter > Bridged Adapter

Power it on!

pass is give from where you download the file

  
su     [switch to root]

ifconfig to get the ip

Do ssh into it using your terminal

Go to https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html#installing-ansible-on-debian

after installation check using the command: ansible


Create two more such servers

We can do different things like applying playbooks on different environments
or you can have 1 for app and other for db 

Now you can create snapshots of these vms we created so that when testing of playbooks is down we can revert back.
So before running the playbook please revert back.



Add the following line to /etc/apt/sources.list or /etc/apt/sources.list.d/ansible.list:

deb http://ppa.launchpad.net/ansible/ansible/ubuntu MATCHING_UBUNTU_CODENAME_HERE main
Example for Debian 11 (Bullseye)

deb http://ppa.launchpad.net/ansible/ansible/ubuntu focal main

for debian12
deb http://deb.debian.org/debian/ bookworm main


Then run these commands:

$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
$ sudo apt update
$ sudo apt install ansible




Ansible Controller

Ansible Target 1
Ansible Target 2



Ansible Controller

cat > inventory.txt

target1 ansible_host=192.168.1.10 ansible_ssh_pass=Passw0rd
target2 ansible_host=192.168.1.13 ansible_ssh_pass=Passw0rd



ansible target1 -m ping  -i inventory.txt     

Failed!

Using a SSH password instead of a key is not possible because Host Key checking is enabled and 
ssh password does not support this. Please add this host's fingerprint to your known_hosts file to manage this host.

Security out of the Box




root@44d2ac6a5c1c:/home/cloud_user# vi inventory.txt 
root@44d2ac6a5c1c:/home/cloud_user# ansible target1 -m ping -i inventory.txt
target1 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
root@44d2ac6a5c1c:/home/cloud_user# cat inventory.txt 
target1 ansible_host=3.83.220.80 ansible_user=cloud_user ansible_ssh_pass=hellohello




Wildcard pattern
ansible target* -m ping -i inventory.txt




Ansible on Docker
run a docker container which is ssh enabled

docker run -it -d mumshad/ubuntu-ssh-enabled

docker pass

docker inspect container_id

get the ip 



run few more containers with the same command
get ip of all 

inside first create inventory.txt

target1 ansbile_host=172.17.0.2 ansible_ssh_pass=Passw0rd
target2
target3


target* -m ping -i inventory.txt







USE CASE  


Web application

Identitfy server
Python Install and install dependencies
Install and Configure Mysql strart 
Install flask
Source code
Run apps 



#inventory file
db_and_web_server ansible_ssh_pass=Passw0rd ansible_host=192.168.1.14


#ansible playbook

---
- name: Deploy Web application
  hosts: db_and_web_server
  tasks:
    - name: Install dependencies
    - name: Install MySQL database
    - name: Start Mysql service
    - name: Create Application database
    - name: Create Application DB user
    - name: Install Python Flask dependencies
    - name: Copy web-server code
    - name: Run web-server




ansible-galaxy init mysql_db 

This command is used to create a role and structure under it.


You can browse roles on ansible galaxy

You can share as well.





Asynchronous Actions

Ansible Master --------SSH-----------> Ansible target

SSH connection stays alive through out the task in a playbook 




Run a process and check on it later
Run multiple process at once and check on them later
Run processes and forget


Lets say as part of our deployment we have a script which performs the health check.
It is located at /opt/monitor_webapp.py 
The script performs checks for 5 mins.
We want ansible to kick off and say check it after 1 min.

Kick it off and check on it later.

By default ansible checks it each 10 sec. But we can change that using poll.
We don't want to wait for 5 mins, why?
What if script fails? We don't want to waste the time.

async - How long to run/

poll - How frequently to check?
       default 10 seconds

Check task9 Properly explained there using comments.